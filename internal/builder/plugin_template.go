package builder

const pluginTemplate = `// Code generated by srediag plugin builder. DO NOT EDIT.
package main

import (
	"encoding/json"
	"fmt"
	"net"
	"os"

	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/{{.Type}}/{{.Name}}"
)

type Message struct {
	Action string          ` + "`json:\"action\"`" + `
	Type   component.Type  ` + "`json:\"type\"`" + `
	Data   interface{}     ` + "`json:\"data\"`" + `
	Error  string         ` + "`json:\"error,omitempty\"`" + `
}

func main() {
	// Get socket path from environment
	socketPath := os.Getenv("SREDIAG_SOCKET")
	if socketPath == "" {
		fmt.Fprintf(os.Stderr, "SREDIAG_SOCKET environment variable not set\n")
		os.Exit(1)
	}

	// Connect to the main process
	conn, err := net.Dial("unix", socketPath)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Failed to connect to socket: %v\n", err)
		os.Exit(1)
	}
	defer conn.Close()

	// Create component factory
	factory := {{.Name}}.NewFactory()

	// Handle messages
	for {
		var msg Message
		if err := json.NewDecoder(conn).Decode(&msg); err != nil {
			fmt.Fprintf(os.Stderr, "Failed to decode message: %v\n", err)
			break
		}

		response := Message{Action: msg.Action, Type: msg.Type}

		switch msg.Action {
		case "type":
			response.Data = factory.Type()
		case "config":
			response.Data = factory.CreateDefaultConfig()
		default:
			response.Error = fmt.Sprintf("unknown action: %s", msg.Action)
		}

		if err := json.NewEncoder(conn).Encode(response); err != nil {
			fmt.Fprintf(os.Stderr, "Failed to encode response: %v\n", err)
			break
		}
	}
}`
